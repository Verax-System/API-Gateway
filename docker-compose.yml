services:
  # 1. API GATEWAY (O PONTO DE ENTRADA ÚNICO)
  gateway:
    image: nginx:1.25-alpine
    container_name: api-gateway
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - plataforma-network
    depends_on:
      - auth-api
      - sales-api
      - fleet-api
      - auth-ui
      - sales-ui
      - fleet-ui

  # 2. SISTEMA DE AUTENTICAÇÃO (VERAX-AUTHAPI)
  auth-api:
    build: ./auth-api
    container_name: auth-api
    env_file: ./auth-api/.env
    command: >
      sh -c "echo 'Auth-API: Aguardando o banco de dados ficar saudável...' && 
              echo 'Auth-API: Rodando migrações...' && 
              alembic upgrade head && 
              echo 'Auth-API: Criando dados iniciais (se necessário)...' &&
              python -m app.db.initial_data &&
              echo 'Auth-API: Iniciando servidor...' && 
              uvicorn main:app --host 0.0.0.0 --port 8001 --reload"
    volumes:
      - ./auth-api:/app
    networks:
      - plataforma-network
    depends_on:
      auth-db:
        condition: service_healthy

  auth-db:
    image: postgres:15-alpine
    container_name: auth-db
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - POSTGRES_DB=auth
    restart: unless-stopped
    networks:
      - plataforma-network
    healthcheck: # <-- CORREÇÃO: Adicionado Healthcheck
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-ui:
    build: ./auth-ui
    container_name: auth-ui
    command: npm run dev
    volumes:
      - ./auth-ui:/app
      - /app/node_modules
    networks:
      - plataforma-network

  # 3. SISTEMA DE VENDAS (VRSALES)
  sales-api:
    build: ./sales-api
    container_name: sales-api
    env_file: ./sales-api/.env
    command: >
      sh -c "echo 'Sales-API: Aguardando o banco de dados ficar saudável...' &&
              echo 'Sales-API: Rodando migrações...' &&
              alembic upgrade head &&
              echo 'Sales-API: Iniciando servidor...' &&
              uvicorn main:app --host 0.0.0.0 --port 8002 --reload" # <-- sleep 10 REMOVIDO
    volumes:
      - ./sales-api:/app
    networks:
      - plataforma-network
    depends_on:
      sales-db: # <-- CORREÇÃO: Espera a condição 'service_healthy'
        condition: service_healthy

  sales-db:
    image: postgres:15-alpine
    container_name: sales-db
    volumes:
      - postgres_sales_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Admin123
      - POSTGRES_DB=sales
    restart: unless-stopped
    networks:
      - plataforma-network
    healthcheck: # <-- CORREÇÃO: Adicionado Healthcheck
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  sales-ui:
    build: ./sales-ui
    container_name: sales-ui
    command: npm run dev
    volumes:
      - ./sales-ui:/app
      - /app/node_modules
    networks:
      - plataforma-network

  # 4. SISTEMA DE FROTA (TRUCAR)
  fleet-api:
    build: ./fleet-api
    container_name: fleet-api
    env_file: ./fleet-api/.env
    command: >
      sh -c "echo 'Fleet-API: Aguardando o banco de dados ficar saudável...' &&
              echo 'Fleet-API: Rodando migrações...' &&
              alembic upgrade head &&
              echo 'Fleet-API: Iniciando servidor...' &&
              uvicorn main:app --host 0.0.0.0 --port 8003 --reload" # <-- sleep 10 REMOVIDO
    volumes:
      - ./fleet-api:/app
      - ./fleet-api/static/uploads:/app/static/uploads
    networks:
      - plataforma-network
    depends_on:
      fleet-db: # <-- CORREÇÃO: Espera a condição 'service_healthy'
        condition: service_healthy

  fleet-db:
    image: postgres:15-alpine
    container_name: fleet-db
    env_file: ./fleet-api/.env # O fleet-db usa as vars daqui (POSTGRES_DB=frota_agil)
    ports:
      - "5435:5432"
    volumes:
      - fleet-data:/var/lib/postgresql/data
    networks:
      - plataforma-network
    healthcheck: # <-- CORREÇÃO: Adicionado Healthcheck
      # Nota: $$POSTGRES_USER funciona mesmo com env_file
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  fleet-ui:
    build: ./fleet-ui
    container_name: fleet-ui
    command: npm run dev
    volumes:
      - ./fleet-ui:/app
      - /app/node_modules
    networks:
      - plataforma-network

networks:
  plataforma-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_sales_data:
  postgres_auth_data:
  fleet-data:
