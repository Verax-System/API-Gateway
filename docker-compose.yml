version: '3.8'

services:
  # 1. API GATEWAY (O PONTO DE ENTRADA ÚNICO)
  gateway:
    image: nginx:1.25-alpine
    container_name: api-gateway
    ports:
      - "80:80" # ÚNICA porta exposta para seu PC: http://localhost
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - plataforma-network
    depends_on:
      - auth-api
      - sales-api
      - fleet-api
      - auth-ui
      - sales-ui
      - fleet-ui

  # 2. SISTEMA DE AUTENTICAÇÃO (VERAX-AUTHAPI)
  auth-api:
    build: ./auth-api
    container_name: auth-api
    env_file: ./auth-api/.env
    # Comando original do docker-compose dele
    command: uvicorn main:app --host 0.0.0.0 --port 8001 --reload 
    volumes:
      - ./auth-api:/app
    networks:
      - plataforma-network
    depends_on:
      - auth-db

  auth-db:
    image: postgres:13 #
    container_name: auth-db
    env_file: ./auth-api/.env
    ports:
      - "5432:5432" # Porta do DB de Autenticação
    volumes:
      - auth-data:/var/lib/postgresql/data
    networks:
      - plataforma-network

  auth-ui:
    build: ./auth-ui
    container_name: auth-ui
    command: npm run dev # Usaremos o script 'dev' corrigido no Passo 5
    volumes:
      - ./auth-ui:/app
      - /app/node_modules # Isola node_modules
    networks:
      - plataforma-network

  # 3. SISTEMA DE VENDAS (VRSALES)
  sales-api:
    build: ./sales-api
    container_name: sales-api
    env_file: ./sales-api/.env
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./sales-api:/app
    networks:
      - plataforma-network
    depends_on:
      - sales-db

  sales-db:
    image: postgres:15-alpine #
    container_name: sales-db
    env_file: ./sales-api/.env
    ports:
      - "5433:5432" # Porta do DB de Vendas
    volumes:
      - sales-data:/var/lib/postgresql/data
    networks:
      - plataforma-network

  sales-ui:
    build: ./sales-ui
    container_name: sales-ui
    command: npm run dev # Usaremos o script 'dev' corrigido no Passo 5
    volumes:
      - ./sales-ui:/app
      - /app/node_modules
    networks:
      - plataforma-network

  # 4. SISTEMA DE FROTA (TRUCAR)
  fleet-api:
    build: ./fleet-api
    container_name: fleet-api
    env_file: ./fleet-api/.env
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./fleet-api:/app
      - ./fleet-api/static/uploads:/app/static/uploads # Persiste uploads
    networks:
      - plataforma-network
    depends_on:
      - fleet-db

  fleet-db:
    image: postgres:15-alpine
    container_name: fleet-db
    env_file: ./fleet-api/.env
    ports:
      - "5434:5432" # Porta do DB de Frota
    volumes:
      - fleet-data:/var/lib/postgresql/data
    networks:
      - plataforma-network

  fleet-ui:
    build: ./fleet-ui
    container_name: fleet-ui
    command: npm run dev # Usaremos o script 'dev' corrigido no Passo 5
    volumes:
      - ./fleet-ui:/app
      - /app/node_modules
    networks:
      - plataforma-network

# Rede única para todos os serviços conversarem
networks:
  plataforma-network:
    driver: bridge

# Volumes para persistir os dados dos bancos
volumes:
  auth-data:
  sales-data:
  fleet-data: